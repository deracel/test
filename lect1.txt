1) git_init - создает репозиторий
2) git status - сообщает нам о том, что гит думает о текущем репозитории
3) git add - добавить файл в гит репозиторий
4) git commit -m "какое то сообщение" - коммитит файл (commit - гит запомнил текущую директорию)
5) git log - посмотреть текущий списко коммитов в репозитории
6) git checkout (копируем уникальное имя коммита) - поменяли main.cpp на тот ее коммит, который мы захотели
если хотим вернуться назад, то делаюем git checkout main
7) git add . - это добавление текущей директории в директорию .git
8) git show хеш - показать что находится в каком то файле, который я закоммитил в прошлом
удалить коммит с краю - можно, потому что он ни на что не ссылается. Удалить коммит посередине - нельзя, потому что он на что то ссылается

если сделать git add test.c после удаления файла test.c, то гит запомнит, что файл test.c - был удален и это нормально.

Если что то удалить из текущей директории, на эту директорию сделать новый коммит

компилятор в гит кидать не надо, его надо сделать следующее:

создаем файл .gitignore

внутри файла .gitignore пишет все файлы, которые не будет попадать в гит
например файл выглядит следующим образом
readme.txt
test/ - мы говорим, чтобы гит никогда не запоминал директорию test/ после git add .
если потом прописать git status - он не будет вообще думать о нашем каталоге test/, потому что мы этот каталог прописан как тот, который мы не будем смотреть
посмотреть git/gitignore для языка c и добавить его для наших прооектов

---------------следующая часть лекции - <<github>>

git remote add origin git@---------.git

~/.gitconfig прописать чтобы по дефолту создавалась ветка main а не master

git branch main - переключаемся на ветку main

git push -u origin - отправили все наше в github

git clone https.... - клонирует все из текущего репозитория



